import Head from "next/head";
import data from "../data";
import { sanity } from "../lib";
import { FC } from "react";
import { GetServerSideProps } from "next";
import { AnimationOnScroll } from "react-animation-on-scroll";
import dynamic from "next/dynamic";

const Navbar = dynamic(() => import("../layouts/navbar/views/Navbar"));
const WorkExperienceTimeLine = dynamic(
  () => import("../components/timeline/WorkExperienceTimeLine")
);
const Certificates = dynamic(() => import("../components/common/Certificates"));
const UserInfo = dynamic(() => import("../components/user/UserInfo"));
const EducationTimeLine = dynamic(
  () => import("../components/timeline/EducationTimeLine")
);

import "animate.css/animate.min.css";

export interface IProps {
  workExperience: { status: string; value: SanityDoc.workExperience[] };
}

const { client } = sanity;
const { query } = data;
const AboutPage: FC<IProps> = ({ workExperience }) => {

  return (
    <>
      <Head>
        <title>HAMJAH</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.png" />
      </Head>
      <div className={"w-full h-full bg-primary scroll-smooth"}>
        <Navbar />
        <main className={"w-full h-full"}>
          <UserInfo />
          <AnimationOnScroll
            duration={3}
            animateIn="animate__fadeIn"
            animateOnce
          >
            <WorkExperienceTimeLine data={workExperience.value} />
          </AnimationOnScroll>
          <AnimationOnScroll
            duration={2}
            animateIn="animate__zoomIn"
            animateOnce
          >
            <EducationTimeLine />
          </AnimationOnScroll>
          <AnimationOnScroll
            duration={2}
            animateIn="animate__slideInUp"
            animateOnce
          >
            <Certificates />
          </AnimationOnScroll>
        </main>
      </div>
    </>
  );
};

export default AboutPage;

export const getServerSideProps: GetServerSideProps = async () => {
  try {
    const [workExperience] = await Promise.allSettled([
      client(process.env.SANITY_TOKEN)
        .fetch(query.sanity.workExperience)
        .then((res) => JSON.parse(JSON.stringify(res))),
    ]);
    return { props: { workExperience } };
  } catch (error) {
    console.error("SSR error!");
    console.error(JSON.stringify(error));
    return { props: {} };
  }
};
